// Curio Parachain

// Copyright (ะก) 2022 Curio AG (Company Number FL-0002.594.728-9)
// Incorporated and registered in Liechtenstein.

// Copyright (ะก) 2022 Curio Capital AG (Company Number CHE-211.446.654)
// Incorporated and registered in Zug, Switzerland.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

//! Autogenerated weights for pallet_refungible
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-15, STEPS: `50`, REPEAT: 80, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/unique-collator
// benchmark
// pallet
// --pallet
// pallet-refungible
// --wasm-execution
// compiled
// --extrinsic
// *
// --template
// .maintain/frame-weight-template.hbs
// --steps=50
// --repeat=80
// --heap-pages=4096
// --output=./pallets/refungible/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_refungible.
pub trait WeightInfo {
	fn init_collection(i: u32, j: u32, ) -> Weight;
	fn destroy_collection() -> Weight;
	fn set_collection_property() -> Weight;
	fn delete_collection_property() -> Weight;
	fn set_collection_properties(k: u32, ) -> Weight;
	fn delete_collection_properties(k: u32, ) -> Weight;
	fn set_property_permission() -> Weight;
	fn create_item(l: u32, p: u32, ) -> Weight;
	fn create_max_item() -> Weight;
	fn set_token_property() -> Weight;
	fn set_token_properties(i: u32, ) -> Weight;
	fn delete_token_property() -> Weight;
	fn delete_token_properties(i: u32, ) -> Weight;
	fn transfer() -> Weight;
	fn set_allowance() -> Weight;
	fn transfer_from() -> Weight;
	fn burn() -> Weight;
	fn burn_from() -> Weight;
	fn repartition() -> Weight;
	fn toggle_admin() -> Weight;
	fn set_sponsor() -> Weight;
	fn confirm_sponsorship() -> Weight;
	fn remove_sponsor() -> Weight;
}

/// Weight functions for `pallet_refungible`.
impl WeightInfo for () {
	// Storage: Whitelist Admins (r:1 w:0)
	// Storage: Common CreatedCollectionCount (r:1 w:1)
	// Storage: Common DestroyedCollectionCount (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:0 w:1)
	// Storage: Common CollectionProperties (r:0 w:1)
	// Storage: Common CollectionById (r:0 w:1)
	/// The range of component `i` is `[1, 64]`.
	/// The range of component `j` is `[1, 64]`.
	fn init_collection(i: u32, j: u32, ) -> Weight {
		// Minimum execution time: 93_165 nanoseconds.
		Weight::from_parts(61_994_232 as u64, 0)
			// Standard Error: 23_402
			.saturating_add(Weight::from_parts(518_223 as u64, 0).saturating_mul(i as u64))
			// Standard Error: 23_402
			.saturating_add(Weight::from_parts(821_422 as u64, 0).saturating_mul(j as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Common CollectionById (r:1 w:1)
	// Storage: Refungible TotalSupply (r:1 w:0)
	// Storage: Common DestroyedCollectionCount (r:1 w:1)
	// Storage: Common AdminAmount (r:0 w:1)
	// Storage: Common CollectionProperties (r:0 w:1)
	// Storage: Refungible TokensMinted (r:0 w:1)
	// Storage: Refungible TokensBurnt (r:0 w:1)
	fn destroy_collection() -> Weight {
		// Minimum execution time: 70_302 nanoseconds.
		Weight::from_parts(83_326_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Common CollectionProperties (r:1 w:1)
	fn set_collection_property() -> Weight {
		// Minimum execution time: 113_202 nanoseconds.
		Weight::from_parts(120_015_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionProperties (r:1 w:1)
	fn delete_collection_property() -> Weight {
		// Minimum execution time: 73_859 nanoseconds.
		Weight::from_parts(76_193_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Common CollectionProperties (r:1 w:1)
	/// The range of component `k` is `[1, 64]`.
	fn set_collection_properties(k: u32, ) -> Weight {
		// Minimum execution time: 100_588 nanoseconds.
		Weight::from_parts(189_427_488 as u64, 0)
			// Standard Error: 557_403
			.saturating_add(Weight::from_parts(31_744_239 as u64, 0).saturating_mul(k as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionProperties (r:1 w:1)
	/// The range of component `k` is `[1, 64]`.
	fn delete_collection_properties(k: u32, ) -> Weight {
		// Minimum execution time: 76_163 nanoseconds.
		Weight::from_parts(204_362_925 as u64, 0)
			// Standard Error: 342_598
			.saturating_add(Weight::from_parts(19_053_434 as u64, 0).saturating_mul(k as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:1)
	fn set_property_permission() -> Weight {
		// Minimum execution time: 83_767 nanoseconds.
		Weight::from_parts(98_224_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:1 w:0)
	// Storage: Whitelist Investors (r:1 w:0)
	// Storage: Refungible TokensMinted (r:1 w:1)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	// Storage: Refungible Balance (r:0 w:1)
	// Storage: Refungible TotalSupply (r:0 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	/// The range of component `l` is `[1, 200]`.
	/// The range of component `p` is `[1, 64]`.
	fn create_item(l: u32, p: u32, ) -> Weight {
		// Minimum execution time: 2_174_522 nanoseconds.
		Weight::from_parts(102_744_053 as u64, 0)
			// Standard Error: 219_067
			.saturating_add(Weight::from_parts(14_611_364 as u64, 0).saturating_mul(l as u64))
			// Standard Error: 687_933
			.saturating_add(Weight::from_parts(32_968_286 as u64, 0).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().reads((3 as u64).saturating_mul(l as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((3 as u64).saturating_mul(l as u64)))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:200 w:0)
	// Storage: Whitelist Investors (r:200 w:0)
	// Storage: Refungible TokensMinted (r:1 w:1)
	// Storage: Refungible AccountBalance (r:200 w:200)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	// Storage: Refungible Balance (r:0 w:200)
	// Storage: Refungible TotalSupply (r:0 w:1)
	// Storage: Refungible Owned (r:0 w:200)
	fn create_max_item() -> Weight {
		// Minimum execution time: 5_117_943 nanoseconds.
		Weight::from_parts(5_347_973_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(604 as u64))
			.saturating_add(RocksDbWeight::get().writes(603 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	fn set_token_property() -> Weight {
		// Minimum execution time: 190_587 nanoseconds.
		Weight::from_parts(220_433_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	/// The range of component `i` is `[1, 64]`.
	fn set_token_properties(i: u32, ) -> Weight {
		// Minimum execution time: 186_700 nanoseconds.
		Weight::from_parts(154_048_734 as u64, 0)
			// Standard Error: 610_143
			.saturating_add(Weight::from_parts(42_422_869 as u64, 0).saturating_mul(i as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	fn delete_token_property() -> Weight {
		// Minimum execution time: 188_312 nanoseconds.
		Weight::from_parts(195_466_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	/// The range of component `i` is `[1, 64]`.
	fn delete_token_properties(i: u32, ) -> Weight {
		// Minimum execution time: 190_026 nanoseconds.
		Weight::from_parts(270_155_264 as u64, 0)
			// Standard Error: 844_835
			.saturating_add(Weight::from_parts(32_669_187 as u64, 0).saturating_mul(i as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:2 w:0)
	// Storage: Whitelist Investors (r:2 w:0)
	// Storage: Refungible Balance (r:2 w:2)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	fn transfer() -> Weight {
		// Minimum execution time: 184_094 nanoseconds.
		Weight::from_parts(199_713_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:2 w:0)
	// Storage: Whitelist Investors (r:2 w:0)
	// Storage: Refungible Balance (r:1 w:0)
	// Storage: Refungible Allowance (r:0 w:1)
	fn set_allowance() -> Weight {
		// Minimum execution time: 163_046 nanoseconds.
		Weight::from_parts(180_148_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:3 w:0)
	// Storage: Whitelist Investors (r:3 w:0)
	// Storage: Refungible Allowance (r:1 w:1)
	// Storage: Refungible Balance (r:2 w:2)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	fn transfer_from() -> Weight {
		// Minimum execution time: 216_977 nanoseconds.
		Weight::from_parts(263_604_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Refungible TotalSupply (r:1 w:1)
	// Storage: Refungible Balance (r:1 w:1)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	fn burn() -> Weight {
		// Minimum execution time: 147_195 nanoseconds.
		Weight::from_parts(162_414_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:2 w:0)
	// Storage: Whitelist Investors (r:2 w:0)
	// Storage: Refungible Allowance (r:1 w:1)
	// Storage: Refungible TotalSupply (r:1 w:1)
	// Storage: Refungible Balance (r:1 w:1)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	fn burn_from() -> Weight {
		// Minimum execution time: 199_343 nanoseconds.
		Weight::from_parts(209_342_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Refungible TotalSupply (r:1 w:1)
	// Storage: Refungible Balance (r:1 w:1)
	fn repartition() -> Weight {
		// Minimum execution time: 50_956 nanoseconds.
		Weight::from_parts(53_300_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist Admins (r:1 w:0)
	// Storage: Common IsAdmin (r:1 w:1)
	// Storage: Common AdminAmount (r:1 w:1)
	fn toggle_admin() -> Weight {
		// Minimum execution time: 129_272 nanoseconds.
		Weight::from_parts(158_387_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}

	fn set_sponsor() -> Weight { todo!() }
	fn confirm_sponsorship() -> Weight { todo!() }
	fn remove_sponsor() -> Weight { todo!() }
}