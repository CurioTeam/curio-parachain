// Curio Parachain

// Copyright (ะก) 2022 Curio AG (Company Number FL-0002.594.728-9)
// Incorporated and registered in Liechtenstein.

// Copyright (ะก) 2022 Curio Capital AG (Company Number CHE-211.446.654)
// Incorporated and registered in Zug, Switzerland.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0


//! Autogenerated weights for pallet_refungible
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/curio-parachain-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-refungible
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/curio-devnet/src/weights/pallet_refungible.rs
// --template=templates/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_refungible.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_refungible::WeightInfo for WeightInfo<T> {
	// Storage: Whitelist Admins (r:1 w:0)
	// Storage: Common CreatedCollectionCount (r:1 w:1)
	// Storage: Common DestroyedCollectionCount (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:0 w:1)
	// Storage: Common CollectionProperties (r:0 w:1)
	// Storage: Common CollectionById (r:0 w:1)
	/// The range of component `i` is `[1, 64]`.
	/// The range of component `j` is `[1, 64]`.
	fn init_collection(i: u32, j: u32, ) -> Weight {
		// Minimum execution time: 98_585 nanoseconds.
		Weight::from_ref_time(38_167_702)
			// Standard Error: 30_885
			.saturating_add(Weight::from_ref_time(920_018).saturating_mul(i.into()))
			// Standard Error: 30_885
			.saturating_add(Weight::from_ref_time(1_153_187).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Common CollectionById (r:1 w:1)
	// Storage: Refungible TotalSupply (r:1 w:0)
	// Storage: Common DestroyedCollectionCount (r:1 w:1)
	// Storage: Common AdminAmount (r:0 w:1)
	// Storage: Common CollectionProperties (r:0 w:1)
	// Storage: Refungible TokensMinted (r:0 w:1)
	// Storage: Refungible TokensBurnt (r:0 w:1)
	fn destroy_collection() -> Weight {
		// Minimum execution time: 73_002 nanoseconds.
		Weight::from_ref_time(74_204_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Common CollectionProperties (r:1 w:1)
	fn set_collection_property() -> Weight {
		// Minimum execution time: 115_499 nanoseconds.
		Weight::from_ref_time(117_053_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionProperties (r:1 w:1)
	fn delete_collection_property() -> Weight {
		// Minimum execution time: 93_570 nanoseconds.
		Weight::from_ref_time(95_652_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Common CollectionProperties (r:1 w:1)
	/// The range of component `k` is `[1, 64]`.
	fn set_collection_properties(k: u32, ) -> Weight {
		// Minimum execution time: 118_786 nanoseconds.
		Weight::from_ref_time(106_629_796)
			// Standard Error: 107_120
			.saturating_add(Weight::from_ref_time(68_726_166).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionProperties (r:1 w:1)
	/// The range of component `k` is `[1, 64]`.
	fn delete_collection_properties(k: u32, ) -> Weight {
		// Minimum execution time: 89_103 nanoseconds.
		Weight::from_ref_time(300_273_774)
			// Standard Error: 271_187
			.saturating_add(Weight::from_ref_time(30_459_530).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:1)
	fn set_property_permission() -> Weight {
		// Minimum execution time: 86_874 nanoseconds.
		Weight::from_ref_time(90_085_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:1 w:0)
	// Storage: Whitelist Investors (r:1 w:0)
	// Storage: Refungible TokensMinted (r:1 w:1)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	// Storage: Refungible Balance (r:0 w:1)
	// Storage: Refungible TotalSupply (r:0 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	/// The range of component `l` is `[1, 200]`.
	/// The range of component `p` is `[1, 64]`.
	fn create_item(l: u32, p: u32, ) -> Weight {
		// Minimum execution time: 3_281_214 nanoseconds.
		Weight::from_ref_time(3_288_816_000)
			// Standard Error: 193_350
			.saturating_add(Weight::from_ref_time(9_552_079).saturating_mul(l.into()))
			// Standard Error: 604_329
			.saturating_add(Weight::from_ref_time(19_025_643).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(l.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(l.into())))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:200 w:0)
	// Storage: Whitelist Investors (r:200 w:0)
	// Storage: Refungible TokensMinted (r:1 w:1)
	// Storage: Refungible AccountBalance (r:200 w:200)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	// Storage: Refungible Balance (r:0 w:200)
	// Storage: Refungible TotalSupply (r:0 w:1)
	// Storage: Refungible Owned (r:0 w:200)
	fn create_max_item() -> Weight {
		// Minimum execution time: 7_440_617 nanoseconds.
		Weight::from_ref_time(7_461_773_000)
			.saturating_add(T::DbWeight::get().reads(604))
			.saturating_add(T::DbWeight::get().writes(603))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	fn set_token_property() -> Weight {
		// Minimum execution time: 152_354 nanoseconds.
		Weight::from_ref_time(153_175_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	/// The range of component `i` is `[1, 64]`.
	fn set_token_properties(i: u32, ) -> Weight {
		// Minimum execution time: 153_474 nanoseconds.
		Weight::from_ref_time(98_928_989)
			// Standard Error: 47_593
			.saturating_add(Weight::from_ref_time(69_645_940).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	fn delete_token_property() -> Weight {
		// Minimum execution time: 154_007 nanoseconds.
		Weight::from_ref_time(159_331_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Common CollectionPropertyPermissions (r:1 w:0)
	// Storage: Refungible TokenProperties (r:1 w:1)
	/// The range of component `i` is `[1, 64]`.
	fn delete_token_properties(i: u32, ) -> Weight {
		// Minimum execution time: 156_909 nanoseconds.
		Weight::from_ref_time(327_818_889)
			// Standard Error: 255_814
			.saturating_add(Weight::from_ref_time(48_441_639).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:2 w:0)
	// Storage: Whitelist Investors (r:2 w:0)
	// Storage: Refungible Balance (r:2 w:2)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	fn transfer() -> Weight {
		// Minimum execution time: 131_970 nanoseconds.
		Weight::from_ref_time(134_027_000)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:2 w:0)
	// Storage: Whitelist Investors (r:2 w:0)
	// Storage: Refungible Balance (r:1 w:0)
	// Storage: Refungible Allowance (r:0 w:1)
	fn set_allowance() -> Weight {
		// Minimum execution time: 111_876 nanoseconds.
		Weight::from_ref_time(113_190_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:3 w:0)
	// Storage: Whitelist Investors (r:3 w:0)
	// Storage: Refungible Allowance (r:1 w:1)
	// Storage: Refungible Balance (r:2 w:2)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	fn transfer_from() -> Weight {
		// Minimum execution time: 162_513 nanoseconds.
		Weight::from_ref_time(163_604_000)
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Refungible TotalSupply (r:1 w:1)
	// Storage: Refungible Balance (r:1 w:1)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	fn burn() -> Weight {
		// Minimum execution time: 108_194 nanoseconds.
		Weight::from_ref_time(110_208_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:2 w:0)
	// Storage: Whitelist Investors (r:2 w:0)
	// Storage: Refungible Allowance (r:1 w:1)
	// Storage: Refungible TotalSupply (r:1 w:1)
	// Storage: Refungible Balance (r:1 w:1)
	// Storage: Refungible AccountBalance (r:1 w:1)
	// Storage: Refungible Owned (r:0 w:1)
	fn burn_from() -> Weight {
		// Minimum execution time: 146_971 nanoseconds.
		Weight::from_ref_time(150_693_000)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Refungible TotalSupply (r:1 w:1)
	// Storage: Refungible Balance (r:1 w:1)
	fn repartition() -> Weight {
		// Minimum execution time: 56_307 nanoseconds.
		Weight::from_ref_time(56_836_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Common CollectionById (r:1 w:0)
	// Storage: Whitelist Admins (r:1 w:0)
	// Storage: Common IsAdmin (r:1 w:1)
	// Storage: Common AdminAmount (r:1 w:1)
	fn toggle_admin() -> Weight {
		// Minimum execution time: 88_510 nanoseconds.
		Weight::from_ref_time(89_933_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}