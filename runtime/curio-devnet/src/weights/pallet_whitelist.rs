
//! Autogenerated weights for `pallet_whitelist`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `alex-ubuntu`, CPU: `12th Gen Intel(R) Core(TM) i7-12700K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/curio-parachain-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_whitelist
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/curio-devnet/src/weights/pallet_whitelist.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_whitelist`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_whitelist::WeightInfo for WeightInfo<T> {
	/// Storage: Whitelist Admins (r:1 w:1)
	/// Proof: Whitelist Admins (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn add_admin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1062`
		//  Estimated: `2524`
		// Minimum execution time: 14_888 nanoseconds.
		Weight::from_parts(15_542_000, 2524)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Whitelist Admins (r:1 w:1)
	/// Proof: Whitelist Admins (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn remove_admin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1137`
		//  Estimated: `2524`
		// Minimum execution time: 16_019 nanoseconds.
		Weight::from_parts(16_545_000, 2524)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Whitelist Admins (r:1 w:0)
	/// Proof: Whitelist Admins (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Whitelist Managers (r:1 w:1)
	/// Proof: Whitelist Managers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn add_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1137`
		//  Estimated: `5048`
		// Minimum execution time: 17_818 nanoseconds.
		Weight::from_parts(18_149_000, 5048)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Whitelist Admins (r:1 w:0)
	/// Proof: Whitelist Admins (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Whitelist Managers (r:1 w:1)
	/// Proof: Whitelist Managers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn remove_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1208`
		//  Estimated: `5048`
		// Minimum execution time: 18_849 nanoseconds.
		Weight::from_parts(19_398_000, 5048)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Whitelist Admins (r:1 w:0)
	/// Proof: Whitelist Admins (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Whitelist KeysOfInvestors (r:100 w:100)
	/// Proof: Whitelist KeysOfInvestors (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Whitelist Investors (r:100 w:100)
	/// Proof: Whitelist Investors (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	fn add_investors(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1137`
		//  Estimated: `2524 + i * (5111 Â±0)`
		// Minimum execution time: 21_835 nanoseconds.
		Weight::from_parts(33_573_749, 2524)
			// Standard Error: 32_214
			.saturating_add(Weight::from_parts(7_837_570, 5111).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(i.into())))
	}
	/// Storage: Whitelist Admins (r:1 w:0)
	/// Proof: Whitelist Admins (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Whitelist KeysOfInvestors (r:1 w:0)
	/// Proof: Whitelist KeysOfInvestors (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Whitelist Investors (r:1 w:1)
	/// Proof: Whitelist Investors (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
	fn set_investor_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1378`
		//  Estimated: `7635`
		// Minimum execution time: 21_786 nanoseconds.
		Weight::from_parts(22_522_000, 7635)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Whitelist Admins (r:1 w:0)
	/// Proof: Whitelist Admins (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Whitelist KeysOfInvestors (r:1 w:2)
	/// Proof: Whitelist KeysOfInvestors (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Whitelist Investors (r:1 w:1)
	/// Proof: Whitelist Investors (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
	fn change_investor_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1378`
		//  Estimated: `7635`
		// Minimum execution time: 24_571 nanoseconds.
		Weight::from_parts(25_636_000, 7635)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Whitelist KeysOfInvestors (r:1 w:2)
	/// Proof: Whitelist KeysOfInvestors (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Whitelist Investors (r:1 w:1)
	/// Proof: Whitelist Investors (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
	fn change_my_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1341`
		//  Estimated: `5111`
		// Minimum execution time: 22_387 nanoseconds.
		Weight::from_parts(23_184_000, 5111)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
