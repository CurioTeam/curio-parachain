
// This file is part of Curio.

// Copyright (C) 2020-2022 Curio Capital AG.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_utility
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-22, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/curio-parachain-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_utility
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// runtime/src/weights/pallet_utility.rs
// --execution
// wasm
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --template
// templates/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_utility.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
	fn batch(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 208_000
			.saturating_add((17_602_000 as Weight).saturating_mul(c as Weight))
	}
	fn as_derivative() -> Weight {
		(35_525_000 as Weight)
	}
	fn batch_all(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 267_000
			.saturating_add((18_628_000 as Weight).saturating_mul(c as Weight))
	}
	fn dispatch_as() -> Weight {
		(93_381_000 as Weight)
	}
	fn force_batch(c: u32, ) -> Weight {
		(206_548_000 as Weight)
			// Standard Error: 222_000
			.saturating_add((17_777_000 as Weight).saturating_mul(c as Weight))
	}
}
