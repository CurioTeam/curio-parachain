
//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `nikita-ubuntu`, CPU: `12th Gen Intel(R) Core(TM) i7-12700K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/curio-parachain-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_collective
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// runtime/curio-testnet/src/weights/pallet_collective.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	// Storage: Council Members (r:1 w:1)
	// Storage: Council Proposals (r:1 w:0)
	// Storage: Council Prime (r:0 w:1)
	// Storage: Council Voting (r:100 w:100)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Minimum execution time: 13_423 nanoseconds.
		Weight::from_ref_time(13_625_000 as u64)
			// Standard Error: 45_483
			.saturating_add(Weight::from_ref_time(3_442_114 as u64).saturating_mul(m as u64))
			// Standard Error: 45_483
			.saturating_add(Weight::from_ref_time(5_485_985 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Council Members (r:1 w:0)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Minimum execution time: 16_864 nanoseconds.
		Weight::from_ref_time(17_502_879 as u64)
			// Standard Error: 74
			.saturating_add(Weight::from_ref_time(658 as u64).saturating_mul(b as u64))
			// Standard Error: 768
			.saturating_add(Weight::from_ref_time(6_799 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:0)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Minimum execution time: 18_865 nanoseconds.
		Weight::from_ref_time(18_879_141 as u64)
			// Standard Error: 92
			.saturating_add(Weight::from_ref_time(1_073 as u64).saturating_mul(b as u64))
			// Standard Error: 957
			.saturating_add(Weight::from_ref_time(14_173 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalCount (r:1 w:1)
	// Storage: Council Voting (r:0 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 24_482 nanoseconds.
		Weight::from_ref_time(24_182_746 as u64)
			// Standard Error: 180
			.saturating_add(Weight::from_ref_time(3_893 as u64).saturating_mul(b as u64))
			// Standard Error: 1_886
			.saturating_add(Weight::from_ref_time(28_461 as u64).saturating_mul(m as u64))
			// Standard Error: 1_862
			.saturating_add(Weight::from_ref_time(215_325 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Voting (r:1 w:1)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Minimum execution time: 30_164 nanoseconds.
		Weight::from_ref_time(33_050_085 as u64)
			// Standard Error: 2_235
			.saturating_add(Weight::from_ref_time(40_645 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 26_112 nanoseconds.
		Weight::from_ref_time(29_597_373 as u64)
			// Standard Error: 2_251
			.saturating_add(Weight::from_ref_time(23_474 as u64).saturating_mul(m as u64))
			// Standard Error: 2_195
			.saturating_add(Weight::from_ref_time(195_897 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 35_646 nanoseconds.
		Weight::from_ref_time(34_834_544 as u64)
			// Standard Error: 161
			.saturating_add(Weight::from_ref_time(3_644 as u64).saturating_mul(b as u64))
			// Standard Error: 1_703
			.saturating_add(Weight::from_ref_time(39_870 as u64).saturating_mul(m as u64))
			// Standard Error: 1_660
			.saturating_add(Weight::from_ref_time(220_153 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Prime (r:1 w:0)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 29_655 nanoseconds.
		Weight::from_ref_time(30_906_497 as u64)
			// Standard Error: 1_528
			.saturating_add(Weight::from_ref_time(33_517 as u64).saturating_mul(m as u64))
			// Standard Error: 1_490
			.saturating_add(Weight::from_ref_time(196_739 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Prime (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 38_121 nanoseconds.
		Weight::from_ref_time(35_458_150 as u64)
			// Standard Error: 185
			.saturating_add(Weight::from_ref_time(4_416 as u64).saturating_mul(b as u64))
			// Standard Error: 1_960
			.saturating_add(Weight::from_ref_time(45_445 as u64).saturating_mul(m as u64))
			// Standard Error: 1_910
			.saturating_add(Weight::from_ref_time(230_891 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council Voting (r:0 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Minimum execution time: 16_648 nanoseconds.
		Weight::from_ref_time(20_366_919 as u64)
			// Standard Error: 1_654
			.saturating_add(Weight::from_ref_time(201_973 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}
