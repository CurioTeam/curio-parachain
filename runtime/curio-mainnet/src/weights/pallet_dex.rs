
//! Autogenerated weights for `pallet_dex`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `alex-ubuntu`, CPU: `12th Gen Intel(R) Core(TM) i7-12700K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/curio-parachain-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_dex
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/curio-devnet/src/weights/pallet_dex.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_dex`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_dex::WeightInfo for WeightInfo<T> {
	/// Storage: Dex TradingPairStatuses (r:1 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	fn enable_trading_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1029`
		//  Estimated: `2598`
		// Minimum execution time: 37_483 nanoseconds.
		Weight::from_parts(38_137_000, 2598)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	fn disable_trading_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1066`
		//  Estimated: `2598`
		// Minimum execution time: 17_065 nanoseconds.
		Weight::from_parts(17_419_000, 2598)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:0)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: Dex ProvisioningPool (r:1 w:0)
	/// Proof: Dex ProvisioningPool (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	fn list_provisioning() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1035`
		//  Estimated: `7667`
		// Minimum execution time: 20_198 nanoseconds.
		Weight::from_parts(20_990_000, 7667)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	fn update_provisioning_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `897`
		//  Estimated: `2598`
		// Minimum execution time: 8_882 nanoseconds.
		Weight::from_parts(9_460_000, 2598)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Dex LiquidityPool (r:1 w:1)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	/// Storage: Dex InitialShareExchangeRates (r:0 w:1)
	/// Proof: Dex InitialShareExchangeRates (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	fn end_provisioning() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1963`
		//  Estimated: `12814`
		// Minimum execution time: 43_140 nanoseconds.
		Weight::from_parts(44_398_000, 12814)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	/// Storage: Dex ProvisioningPool (r:1 w:1)
	/// Proof: Dex ProvisioningPool (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	fn add_provision() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1933`
		//  Estimated: `12934`
		// Minimum execution time: 73_114 nanoseconds.
		Weight::from_parts(77_675_000, 12934)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:0)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	/// Storage: Dex ProvisioningPool (r:2 w:1)
	/// Proof: Dex ProvisioningPool (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Dex InitialShareExchangeRates (r:1 w:1)
	/// Proof: Dex InitialShareExchangeRates (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_dex_share() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2306`
		//  Estimated: `18024`
		// Minimum execution time: 59_026 nanoseconds.
		Weight::from_parts(61_426_000, 18024)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:0)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	/// Storage: Dex LiquidityPool (r:1 w:1)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:3 w:3)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	fn add_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2258`
		//  Estimated: `17982`
		// Minimum execution time: 78_472 nanoseconds.
		Weight::from_parts(89_013_000, 17982)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:0)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	/// Storage: Dex LiquidityPool (r:1 w:1)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:3 w:3)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	fn add_liquidity_and_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2258`
		//  Estimated: `17982`
		// Minimum execution time: 87_080 nanoseconds.
		Weight::from_parts(401_863_000, 17982)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Dex LiquidityPool (r:1 w:1)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:3 w:3)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn remove_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2327`
		//  Estimated: `15384`
		// Minimum execution time: 79_238 nanoseconds.
		Weight::from_parts(81_617_000, 15384)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Dex LiquidityPool (r:1 w:1)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:3 w:3)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn remove_liquidity_by_unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2327`
		//  Estimated: `15384`
		// Minimum execution time: 81_137 nanoseconds.
		Weight::from_parts(83_380_000, 15384)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Dex TradingPairStatuses (r:2 w:0)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	/// Storage: Dex LiquidityPool (r:2 w:2)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// The range of component `u` is `[2, 3]`.
	fn swap_with_exact_supply(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1844 + u * (110 ±0)`
		//  Estimated: `12894 + u * (75 ±7)`
		// Minimum execution time: 67_685 nanoseconds.
		Weight::from_parts(52_177_324, 12894)
			// Standard Error: 264_737
			.saturating_add(Weight::from_parts(9_238_791, 75).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(u.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(u.into())))
	}
	/// Storage: Dex TradingPairStatuses (r:2 w:0)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	/// Storage: Dex LiquidityPool (r:2 w:2)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// The range of component `u` is `[2, 3]`.
	fn swap_with_exact_target(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1844 + u * (110 ±0)`
		//  Estimated: `12894 + u * (75 ±7)`
		// Minimum execution time: 67_210 nanoseconds.
		Weight::from_parts(51_791_710, 12894)
			// Standard Error: 270_857
			.saturating_add(Weight::from_parts(9_421_963, 75).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(u.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(u.into())))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:0)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	/// Storage: Dex InitialShareExchangeRates (r:1 w:0)
	/// Proof: Dex InitialShareExchangeRates (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
	/// Storage: Dex ProvisioningPool (r:1 w:1)
	/// Proof: Dex ProvisioningPool (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	fn refund_provision() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2323`
		//  Estimated: `15459`
		// Minimum execution time: 67_452 nanoseconds.
		Weight::from_parts(70_622_000, 15459)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
	fn abort_provisioning() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1239`
		//  Estimated: `2598`
		// Minimum execution time: 20_044 nanoseconds.
		Weight::from_parts(20_789_000, 2598)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
