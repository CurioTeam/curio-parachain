
//! Autogenerated weights for `pallet_currencies`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `alex-ubuntu`, CPU: `12th Gen Intel(R) Core(TM) i7-12700K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/curio-parachain-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_currencies
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/curio-devnet/src/weights/pallet_currencies.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_currencies`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_currencies::WeightInfo for WeightInfo<T> {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn transfer_non_native_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1529`
		//  Estimated: `2603`
		// Minimum execution time: 37_495 nanoseconds.
		Weight::from_parts(38_212_000, 2603)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn transfer_native_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1529`
		//  Estimated: `2603`
		// Minimum execution time: 34_104 nanoseconds.
		Weight::from_parts(34_815_000, 2603)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn update_balance_non_native_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1540`
		//  Estimated: `2603`
		// Minimum execution time: 27_119 nanoseconds.
		Weight::from_parts(32_518_000, 2603)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn update_balance_native_currency_creating() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1540`
		//  Estimated: `2603`
		// Minimum execution time: 27_593 nanoseconds.
		Weight::from_parts(28_308_000, 2603)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn update_balance_native_currency_killing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1660`
		//  Estimated: `2603`
		// Minimum execution time: 24_860 nanoseconds.
		Weight::from_parts(25_756_000, 2603)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: System Account (r:3 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 3]`.
	fn sweep_dust(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1337`
		//  Estimated: `0 + c * (2603 Â±0)`
		// Minimum execution time: 8_345 nanoseconds.
		Weight::from_parts(11_227_000, 0)
			// Standard Error: 150_897
			.saturating_add(Weight::from_parts(506_571, 2603).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
	}
}
