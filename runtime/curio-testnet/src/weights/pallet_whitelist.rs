// Curio Parachain

// Copyright (ะก) 2022 Curio AG (Company Number FL-0002.594.728-9)
// Incorporated and registered in Liechtenstein.

// Copyright (ะก) 2022 Curio Capital AG (Company Number CHE-211.446.654)
// Incorporated and registered in Zug, Switzerland.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0


//! Autogenerated weights for pallet_whitelist
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/curio-parachain-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-whitelist
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/curio-devnet/src/weights/pallet_whitelist.rs
// --template=templates/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_whitelist.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_whitelist::WeightInfo for WeightInfo<T> {
	// Storage: Whitelist Admins (r:1 w:1)
	fn add_admin() -> Weight {
		// Minimum execution time: 26_201 nanoseconds.
		Weight::from_ref_time(37_908_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Whitelist Admins (r:1 w:1)
	fn remove_admin() -> Weight {
		// Minimum execution time: 27_299 nanoseconds.
		Weight::from_ref_time(27_813_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Whitelist Admins (r:1 w:0)
	// Storage: Whitelist Managers (r:1 w:1)
	fn add_manager() -> Weight {
		// Minimum execution time: 29_436 nanoseconds.
		Weight::from_ref_time(29_793_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Whitelist Admins (r:1 w:0)
	// Storage: Whitelist Managers (r:1 w:1)
	fn remove_manager() -> Weight {
		// Minimum execution time: 30_882 nanoseconds.
		Weight::from_ref_time(31_654_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Whitelist Admins (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:1 w:1)
	// Storage: Whitelist Investors (r:1 w:1)
	/// The range of component `i` is `[1, 100]`.
	fn add_investors(i: u32, ) -> Weight {
		// Minimum execution time: 36_579 nanoseconds.
		Weight::from_ref_time(37_445_571)
			// Standard Error: 32_433
			.saturating_add(Weight::from_ref_time(10_394_652).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(i.into())))
	}
	// Storage: Whitelist Admins (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:1 w:0)
	// Storage: Whitelist Investors (r:1 w:1)
	fn set_investor_status() -> Weight {
		// Minimum execution time: 47_223 nanoseconds.
		Weight::from_ref_time(55_146_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Whitelist Admins (r:1 w:0)
	// Storage: Whitelist KeysOfInvestors (r:1 w:2)
	// Storage: Whitelist Investors (r:1 w:1)
	fn change_investor_address() -> Weight {
		// Minimum execution time: 38_494 nanoseconds.
		Weight::from_ref_time(39_859_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Whitelist KeysOfInvestors (r:1 w:2)
	// Storage: Whitelist Investors (r:1 w:1)
	fn change_my_address() -> Weight {
		// Minimum execution time: 38_555 nanoseconds.
		Weight::from_ref_time(55_147_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}